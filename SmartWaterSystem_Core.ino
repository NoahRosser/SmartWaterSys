/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/9b3f27d1-0ada-4010-879e-183e4ff0eab9 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int plant_1_Moisture_Threshold;
  bool module_1_Switch;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "module.h"

constexpr uint32_t module_count = 1;

const MoistureLevel moisture_widget_map[3] = {Moist, Dry, Test};

unsigned long prev_time;
unsigned long curr_time;
double delta_time;

// Plant Module Factory
Module modules[module_count] = {
  { 
    .plant = { .moisture_type = Test }, 
    .valve = { .valve_pin = 2, .is_open = false },
    .moisture_sensor = { .moisture_pin = A0, .moisture_value = 0 },
    .is_watering = false,
    .is_enabled = false,
  }
};

void setup() {
  Serial.begin(9600);
  
  delay(1500);
  
  initProperties();

  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  for (uint32_t i = 0; i < module_count; i++) {
    modules[i].init();
  }
}

void loop() {
  ArduinoCloud.update();
  
  for (uint32_t i = 0; i < module_count; i++) {
    modules[i].update();
  }

  delay(1000);
}


/*
  Since Plant1MoistureThreshold is READ_WRITE variable, onPlant1MoistureThresholdChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPlant1MoistureThresholdChange()  {
  modules[0].plant.moisture_type = moisture_widget_map[plant_1_Moisture_Threshold];
}


/*
  Since Module1Switch is READ_WRITE variable, onModule1SwitchChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onModule1SwitchChange()  {
  if (module_1_Switch) {
    modules[0].Enable();
  } else {
    modules[0].Disable();
  }
}
